{"remainingRequest":"D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Workspace\\Web\\221_Web_Programming\\client\\src\\components\\Form.vue?vue&type=template&id=1b5a9218&scoped=true&","dependencies":[{"path":"D:\\Workspace\\Web\\221_Web_Programming\\client\\src\\components\\Form.vue","mtime":1655547471293},{"path":"D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655541733801},{"path":"D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655541769422},{"path":"D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655541733801},{"path":"D:\\Workspace\\Web\\221_Web_Programming\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1655541769422}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}