{"remainingRequest":"/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dathuynh/Workspace/221_Web_Programming/client/src/components/Form.vue?vue&type=template&id=1b5a9218&scoped=true&","dependencies":[{"path":"/home/dathuynh/Workspace/221_Web_Programming/client/src/components/Form.vue","mtime":1655197556717},{"path":"/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/cache-loader/dist/cjs.js","mtime":1654787234194},{"path":"/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1654787310467},{"path":"/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/cache-loader/dist/cjs.js","mtime":1654787234194},{"path":"/home/dathuynh/Workspace/221_Web_Programming/client/node_modules/vue-loader/lib/index.js","mtime":1654787310467}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}